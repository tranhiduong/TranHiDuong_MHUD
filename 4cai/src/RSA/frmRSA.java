/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RSA;

import java.awt.FileDialog;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hoang hiep
 */
public class frmRSA extends javax.swing.JFrame {

    /**
     * Creates new form frmRSA
     */
    public frmRSA() throws NoSuchAlgorithmException {
        initComponents();
        rsa = new classRSA();
        
    }
    private classRSA rsa;
    private PublicKey publickey;
    private PrivateKey privatekey;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("File Mã Hóa :");

        jLabel3.setText("File Giải Mã:");

        jLabel4.setText("PrivateKey:");

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Mã hóa");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Giải mã");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton6)
                    .addComponent(jLabel1))
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton3)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jButton4))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File file = getFileDialogOpen("*.*");
        if(file== null)
        return;
        jTextField1.setText(file.getAbsolutePath());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        File file = getFileDialogOpen("*.*");
        if(file== null)
        return;
        jTextField3.setText(file.getAbsolutePath());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        File file = getFileDialogOpen("*.*");
        if(file== null)
        return;
        jTextField4.setText(file.getAbsolutePath());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            File file = new File( jTextField1.getText());
            byte[]data = readByteFile(file);
            System.out.println(data);
            data = rsa.EnCrypt(data);
            System.out.println(data);
            if(writeByFile(file.getAbsolutePath()+".mahoa", data)&&
                writeObjectFile(file.getAbsolutePath()+".key",rsa.getPriK()))
            {
                file.delete();
                JOptionPane.showMessageDialog(null, "File mã hóa: "+file.getName()+".mahoa\n"+
                    "Key ma hoa: "+file.getName()+".key\n", "Done",JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        File file = new File(jTextField3.getText());
        File keyfile = new File(jTextField4.getText());
        if(!file.exists()){
            JOptionPane.showMessageDialog(null, "File mã hóa không tồn tại hoặc không thể truy cập",
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!keyfile.exists()){
            JOptionPane.showMessageDialog(null, "Key không tồn tại hoặc không thể truy cập",
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        byte [] data = readByteFile(file);
        PrivateKey keys = (PrivateKey)readObjectFile(keyfile);
        data = rsa.DeCrypt(data, keys);
        String filename = file.getAbsolutePath().
        substring(0,file.getAbsolutePath().length()-5);
        if(writeByFile(filename, data)){
            file.delete();
            keyfile.delete();
            JOptionPane.showMessageDialog(null, "Giải mã thành công",
                "Done",JOptionPane.INFORMATION_MESSAGE);
            jTextField3.setText("");
            jTextField4.setText("");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmRSA().setVisible(true);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(frmRSA.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
//<editor-fold defaultstate="collapsed" desc="Cac ham chuc nang">
    private File getFileDialogOpen(String string) {
        FileDialog fd = new FileDialog(this, "Chọn file", FileDialog.LOAD);
        fd.setFile(string);
        fd.setVisible(true);
        if (fd.getFile()==null) {
            return null;
        }
        File file = new File(fd.getDirectory()+fd.getFile());
        if(!file.canRead()){
            JOptionPane.showMessageDialog(null, "File bạn chọn không thể đọc.",
                    "Error",JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return file;
    }
   
    private byte[] readByteFile(File file) {
        byte[] data=null;
        try {
            FileInputStream fi = new FileInputStream(file);
            int c,i=0;
            data = new byte[(int)file.length()];
            while((c = fi.read())!=-1)
            {
                data[i++] = (byte)c;
            }
            fi.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, file.getName()+" không thể đọc file",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return data;
    }
    private boolean writeByFile(String fileName, byte[]data){
        File file = new File(fileName);
        if(!file.canWrite()){
            try {
                file.createNewFile();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Không thể tạo file "+file.getName(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        try {
            FileOutputStream fo = new FileOutputStream(file);
            fo.write(data);
            fo.close();
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Không thể ghi file "+file.getName(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private Object readObjectFile(File file){
        Object obj;
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));
            obj = (Object)ois.readObject();
            ois.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Không thể đọc được file "+file.getName(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        
        return obj;
    }
    private boolean writeObjectFile(String filename, Object data){
        File file = new File(filename);
        if(!file.canWrite()){
            try {
                file.createNewFile();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Không thể tạo được file "+file.getName(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        try {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));
            oos.writeObject(data);
            oos.close();
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Không thể ghi dữ liệu lên file "+ file.getName(),
                    "Error",JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    private boolean writeObjectFile1( Object data){
        File file = new File("C:\\Users\\QuocTrong\\Desktop\\Newfile.key.txt");
        if(!file.canWrite()){
            try {
                file.createNewFile();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Không thể tạo được file "+file.getName(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        try {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));
            oos.writeObject(data);
            oos.close();
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Không thể ghi dữ liệu lên file "+ file.getName(),
                    "Error",JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
 
 
    private void fetchChild(File file) {
        if (file.isDirectory()) {
 
            File[] children = file.listFiles();
 
            for (File child : children) {
               
                this.fetchChild(child);
            }
        }
 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
